{"version":3,"sources":["script.js"],"names":["document","addEventListener","fetch","then","response","ok","Error","text","data","getElementById","innerHTML","btnOpen","querySelector","btnClose","media","window","matchMedia","topNavMenu","main","body","setupTopNav","e","matches","console","log","getAttribute","setAttribute","style","transition","removeAttribute","bodyScrollLockUpgrade","disableBodyScroll","focus","classList","add","enableBodyScroll","setTimeout","remove","catch","error"],"mappings":"AAAA,aAGAA,SAASC,iBAAiB,oBAAoB,WAG5CC,MAAM,eACHC,MAAK,SAAAC,GAEJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,+BAGlB,OAAOF,EAASG,UAEjBJ,MAAK,SAAAK,GAEJR,SAASS,eAAe,sBAAsBC,UAAYF,EAG1D,IAAMG,EAAUX,SAASY,cAAc,YACjCC,EAAWb,SAASY,cAAc,aAGlCE,EAAQC,OAAOC,WAAW,yBAG1BC,EAAajB,SAASY,cAAc,iBACpCM,EAAOlB,SAASY,cAAc,QAC9BO,EAAOnB,SAASY,cAAc,QAMpC,SAASQ,EAAYC,GACfA,EAAEC,SAEJC,QAAQC,IAAI,aAEkC,SAA1Cb,EAAQc,aAAa,mBACvBR,EAAWS,aAAa,QAAS,IACjCT,EAAWU,MAAMC,WAAa,UAIhCL,QAAQC,IAAI,qBACZP,EAAWY,gBAAgB,UAwC/BT,EAAYN,GAGZH,EAAQV,iBAAiB,SAlCzB,WACEU,EAAQe,aAAa,gBAAiB,QACtCT,EAAWY,gBAAgB,SAC3BZ,EAAWY,gBAAgB,SAC3BX,EAAKQ,aAAa,QAAS,IAC3BI,sBAAsBC,kBAAkBZ,GACxCN,EAASmB,QAEThC,SAASY,cAAc,UAAUqB,UAAUC,IAAI,gBA2BjDrB,EAASZ,iBAAiB,SAnB1B,WACEU,EAAQe,aAAa,gBAAiB,SACtCT,EAAWS,aAAa,QAAS,IACjCR,EAAKW,gBAAgB,SACrBC,sBAAsBK,iBAAiBhB,GACvCR,EAAQqB,QAERI,YAAW,WACTnB,EAAWU,MAAMC,WAAa,SAC7B,KAEH5B,SAASY,cAAc,UAAUqB,UAAUI,OAAO,gBAWpDvB,EAAMb,iBAAiB,UAAU,SAAUoB,GACzCD,EAAYC,SAIfiB,OAAM,SAAAC,GAAK,OAAIhB,QAAQgB,MAAM,yBAA0BA","file":"script.js","sourcesContent":["\"use strict\";\r\n\r\n// Wait for the entire DOM (Document Object Model) to load before executing the code.\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    \r\n  // Fetch the external header HTML file (header.html) to reuse the header across pages.\r\n  fetch('header.html')\r\n    .then(response => {\r\n      // Check if the response is OK (status 200-299)\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      // Convert the response into text (HTML)\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      // Insert the fetched header HTML into the element with id \"header-placeholder\"\r\n      document.getElementById('header-placeholder').innerHTML = data;\r\n      \r\n      // Now that the header is injected, select the elements needed for the mobile menu\r\n      const btnOpen = document.querySelector(\"#btnOpen\");     // Hamburger button to open menu\r\n      const btnClose = document.querySelector(\"#btnClose\");   // Button to close menu\r\n      \r\n      // Media query for mobile devices (max-width: 46.999em)\r\n      const media = window.matchMedia(\"(max-width: 46.999em)\");\r\n  \r\n      // Select the navigation menu, main content, and body elements\r\n      const topNavMenu = document.querySelector(\".topnav__menu\");\r\n      const main = document.querySelector(\"main\");\r\n      const body = document.querySelector(\"body\");\r\n  \r\n      /**\r\n       * setupTopNav - Configures the navigation menu based on the current viewport.\r\n       * @param {MediaQueryListEvent|MediaQueryList} e - The media query event or object.\r\n       */\r\n      function setupTopNav(e) {\r\n        if (e.matches) {\r\n          // If the viewport matches mobile criteria\r\n          console.log(\"is mobile\");\r\n          // Only set the inert attribute if the menu isn't open\r\n          if (btnOpen.getAttribute(\"aria-expanded\") !== \"true\") {\r\n            topNavMenu.setAttribute(\"inert\", \"\");\r\n            topNavMenu.style.transition = \"none\"; // Disable transitions for immediate effect\r\n          }\r\n        } else {\r\n          // For tablet/desktop viewports\r\n          console.log(\"is tablet/desktop\");\r\n          topNavMenu.removeAttribute(\"inert\"); // Make the menu interactive\r\n        }\r\n      }\r\n  \r\n      /**\r\n       * openMobileMenu - Opens the mobile navigation menu.\r\n       * It updates ARIA attributes, removes inert states, disables body scroll,\r\n       * and sets focus on the close button for accessibility.\r\n       */\r\n      function openMobileMenu() {\r\n        btnOpen.setAttribute(\"aria-expanded\", \"true\"); // Mark as open\r\n        topNavMenu.removeAttribute(\"inert\");           // Enable menu interaction\r\n        topNavMenu.removeAttribute(\"style\");           // Clear inline styles (if any)\r\n        main.setAttribute(\"inert\", \"\");                  // Prevent main content interaction\r\n        bodyScrollLockUpgrade.disableBodyScroll(body);   // Disable scrolling on the body\r\n        btnClose.focus();                                // Move focus to the close button\r\n        // Add a class to the header to indicate that the menu is open (for styling)\r\n        document.querySelector(\"header\").classList.add(\"menu-open\");\r\n      }\r\n  \r\n      /**\r\n       * closeMobileMenu - Closes the mobile navigation menu.\r\n       * It reverts the ARIA attributes, re-enables body scroll,\r\n       * and returns focus to the hamburger button.\r\n       */\r\n      function closeMobileMenu() {\r\n        btnOpen.setAttribute(\"aria-expanded\", \"false\"); // Mark as closed\r\n        topNavMenu.setAttribute(\"inert\", \"\");             // Disable menu interaction\r\n        main.removeAttribute(\"inert\");                   // Re-enable main content interaction\r\n        bodyScrollLockUpgrade.enableBodyScroll(body);      // Enable scrolling on the body\r\n        btnOpen.focus();                                 // Return focus to the open button\r\n        // Clear any transition styles after a brief delay for smooth closing\r\n        setTimeout(() => {\r\n          topNavMenu.style.transition = \"none\";\r\n        }, 500);\r\n        // Remove the menu-open class from the header\r\n        document.querySelector(\"header\").classList.remove(\"menu-open\");\r\n      }\r\n  \r\n      // Configure the navigation based on the current viewport immediately\r\n      setupTopNav(media);\r\n  \r\n      // Attach event listeners for opening and closing the mobile menu\r\n      btnOpen.addEventListener(\"click\", openMobileMenu);\r\n      btnClose.addEventListener(\"click\", closeMobileMenu);\r\n  \r\n      // Re-run setupTopNav if the viewport changes (e.g., orientation change)\r\n      media.addEventListener(\"change\", function (e) {\r\n        setupTopNav(e);\r\n      });\r\n  \r\n    })\r\n    .catch(error => console.error('Error fetching header:', error)); // Log any errors\r\n});\r\n"]}